---
/**
 * Komponen SEO generik untuk semua halaman.
 * Fitur:
 * - Meta: title, description, robots, canonical (tanpa query/hash)
 * - Open Graph & Twitter Card
 * - JSON-LD: WebSite & Organization (home/website), Blog (index), Breadcrumb, BlogPosting (post)
 */

interface Crumb { name: string; item: string; }
interface Props {
  title: string;
  description?: string;
  image?: string;           // relatif atau absolut
  type?: "website" | "article";
  canonical?: string;       // absolut; default = current URL
  noindex?: boolean;
  locale?: string;          // contoh: "id-ID"
  siteName?: string;        // fallback: hostname
  twitter?: string;         // @handle
  breadcrumbs?: Crumb[];    // untuk BreadcrumbList (akan diabs-kan)
  isBlogIndex?: boolean;    // true di halaman /blog
  article?: {
    publishedTime?: string | Date;
    modifiedTime?: string | Date;
    authors?: string[];
    tags?: string[];
  };
}

const {
  title,
  description = "",
  image,
  type = "website",
  canonical,
  noindex = false,
  locale = "id-ID",
  siteName = (Astro.site ? new URL(Astro.site).hostname : "Twotworial"),
  twitter = "@twotworial",
  breadcrumbs = [],
  isBlogIndex = false,
  article
} = Astro.props as Props;

/** Base origin — pastikan di astro.config.mjs: `site: "https://twotworial.com"` */
const siteOrigin = (Astro.site ? new URL(Astro.site as any).origin : "https://twotworial.com");

/** Normalisasi URL (hapus query/hash) */
function cleanUrl(u: string): string {
  const url = new URL(u);
  url.search = "";
  url.hash = "";
  return url.href;
}

/** URL saat ini sebagai fallback canonical */
const currentAbs = new URL(Astro.url, siteOrigin).href;
const canonicalUrl = cleanUrl(canonical ?? currentAbs);

/** Utility absolutkan aset/URL */
function abs(u?: string | null): string | undefined {
  if (!u) return undefined;
  try {
    if (/^https?:\/\//i.test(u)) return cleanUrl(u);
    return new URL(u.startsWith("/") ? u : `/${u}`, siteOrigin).href;
  } catch {
    return u;
  }
}
const ogImage = abs(image);

/** Logo default untuk Organization/Publisher */
const defaultLogo = abs("/TwotworialSQ.webp");

/* ======================
   JSON-LD builder
   ====================== */
const jsonld: any[] = [];

/** WebSite & Organization — tampilkan untuk homepage ATAU saat type=website */
if (new URL(canonicalUrl).pathname === "/" || type === "website") {
  jsonld.push({
    "@context": "https://schema.org",
    "@type": "WebSite",
    "url": canonicalUrl,
    "name": siteName,
    "inLanguage": locale,
    "potentialAction": {
      "@type": "SearchAction",
      "target": `${siteOrigin}/?s={search_term_string}`,
      "query-input": "required name=search_term_string"
    }
  });
  jsonld.push({
    "@context": "https://schema.org",
    "@type": "Organization",
    "url": siteOrigin + "/",
    "name": siteName,
    "logo": defaultLogo
  });
}

/** Blog index */
if (isBlogIndex) {
  jsonld.push({
    "@context": "https://schema.org",
    "@type": "Blog",
    "name": `${siteName} Blog`,
    "url": canonicalUrl
  });
}

/** Breadcrumbs (jadikan absolut) */
if (breadcrumbs.length > 0) {
  jsonld.push({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": breadcrumbs.map((c, i) => ({
      "@type": "ListItem",
      "position": i + 1,
      "name": c.name,
      "item": abs(c.item)
    }))
  });
}

/** BlogPosting (untuk halaman artikel) */
if (article) {
  jsonld.push({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": title,
    "description": description,
    "image": ogImage,
    "mainEntityOfPage": canonicalUrl,
    "datePublished": article.publishedTime ? new Date(article.publishedTime).toISOString() : undefined,
    "dateModified": article.modifiedTime ? new Date(article.modifiedTime).toISOString() : undefined,
    "author": (article.authors ?? []).map(a => ({ "@type": "Person", "name": a })),
    "publisher": {
      "@type": "Organization",
      "name": siteName,
      "logo": { "@type": "ImageObject", "url": defaultLogo }
    }
  });
}

/** Helper untuk aman disisipkan (hindari </script> break) */
const jsonldStr = JSON.stringify(jsonld).replace(/</g, "\\u003c");
---

<!-- ===== Meta dasar ===== -->
<title>{title}</title>
<meta name="description" content={description} />
<link rel="canonical" href={canonicalUrl} />

<!-- Robots -->
{noindex ? (
  <>
    <meta name="robots" content="noindex,nofollow,max-image-preview:large" />
    <meta name="googlebot" content="noindex,nofollow" />
  </>
) : (
  <>
    <meta name="robots" content="index,follow,max-snippet:-1,max-image-preview:large,max-video-preview:-1" />
    <meta name="googlebot" content="index,follow" />
  </>
)}

<!-- Language & locale -->
<meta http-equiv="content-language" content={locale} />
<meta property="og:locale" content={locale.replace("-", "_")} />

<!-- ===== Open Graph ===== -->
<meta property="og:site_name" content={siteName} />
<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonicalUrl} />
{ogImage && <meta property="og:image" content={ogImage} />}
{ogImage && <meta property="og:image:alt" content={title} />}

{article?.publishedTime && (
  <meta property="article:published_time" content={new Date(article.publishedTime).toISOString()} />
)}
{article?.modifiedTime && (
  <meta property="article:modified_time" content={new Date(article.modifiedTime).toISOString()} />
)}
{article?.tags && article.tags.map(t => <meta property="article:tag" content={t} />)}

<!-- ===== Twitter Cards ===== -->
<meta name="twitter:card" content={ogImage ? "summary_large_image" : "summary"} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
{ogImage && <meta name="twitter:image" content={ogImage} />}
<meta name="twitter:site" content={twitter} />

<!-- ===== JSON-LD (inline) ===== -->
{jsonld.length > 0 && (
  <script type="application/ld+json" is:inline set:html={jsonldStr}></script>
)}
