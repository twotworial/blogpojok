---
import MainLayout from "../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import { withBase } from "../../utils/helpers";
import siteConfig from "../../site.config";

/** Bangun semua path statis (slug → string, bukan array) */
export async function getStaticPaths() {
  const items = await getCollection("products");
  return items.map((p) => ({
    params: { slug: p.slug ?? p.id.replace(/\.mdx?$/i, "") },
    props: { product: p },
  }));
}

const { product } = Astro.props as {
  product: {
    id: string;
    slug?: string;
    body: string;
    data: Record<string, any>;
  };
};

const data = product.data;

/** Normalisasi sumber gambar */
function normalizeImg(input?: string | { src: string; alt?: string }) {
  if (!input) return undefined;
  const raw = typeof input === "string" ? input : input.src;
  if (!raw) return undefined;

  // URL absolut
  if (/^https?:\/\//i.test(raw)) return raw;

  // Path absolut dari public → biarkan
  if (raw.startsWith("/assets/images/") || raw.startsWith("/images/products/")) {
    return withBase(raw);
  }

  // Nama file → ke /images/products/
  return withBase(`/images/products/${raw}`);
}

/** Derivasi nilai dasar */
const title = data.title ?? "Produk";
const slug = product.slug ?? product.id.replace(/\.mdx?$/i, "");
const siteBase = Astro.site ?? siteConfig.website ?? "https://twotworial.com";
const canonicalUrl = new URL(`/produk/${slug}/`, siteBase).href;
const excerpt = data.excerpt ?? data.description ?? "";

/** Kumpulan gambar ter-normalisasi */
const imageList: { url: string; alt?: string }[] = Array.isArray(data.images)
  ? data.images
      .map((img: any) => {
        const url = normalizeImg(img);
        const alt =
          typeof img === "string" ? title : (img?.alt ?? title);
        return url ? { url, alt } : null;
      })
      .filter(Boolean)
  : [];

/** BreadcrumbList JSON-LD */
const breadcrumbJSONLD = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Home",
      item: new URL("/", siteBase).href,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: "Produk",
      item: new URL("/produk/", siteBase).href,
    },
    {
      "@type": "ListItem",
      position: 3,
      name: title,
      item: canonicalUrl,
    },
  ],
};

/** Product JSON-LD */
const productJSONLD: any = {
  "@context": "https://schema.org",
  "@type": "Product",
  name: title,
  description: excerpt,
  ...(imageList.length ? { image: imageList.map((i) => i.url) } : {}),
  ...(data.sku ? { sku: data.sku } : {}),
  ...(data.brand ? { brand: { "@type": "Brand", name: data.brand } } : {}),
  ...(data.tags && Array.isArray(data.tags) && data.tags.length
    ? { category: data.tags.join(", ") }
    : {}),
  offers: {
    "@type": "Offer",
    priceCurrency: data.currency ?? "IDR",
    price: typeof data.price === "number" ? data.price : undefined,
    availability: data.availability
      ? `https://schema.org/${data.availability}`
      : "https://schema.org/InStock",
    url: canonicalUrl,
  },
};
---

<MainLayout
  activePage="produk"
  pageTitle={`${title} | ${siteConfig.title}`}
  description={excerpt}
  breadcrumbTitle={title}
>
  <!-- Canonical -->
  <link rel="canonical" href={canonicalUrl} />

  <!-- JSON-LD -->
  <script type="application/ld+json" is:inline>
    {JSON.stringify(breadcrumbJSONLD).replace(/</g, "\\u003c")}
  </script>
  <script type="application/ld+json" is:inline>
    {JSON.stringify(productJSONLD).replace(/</g, "\\u003c")}
  </script>

  <section class="page-content">
    <h1 class="text-balance">{title}</h1>

    {excerpt && <p class="mb-6 opacity-85">{excerpt}</p>}

    {typeof data.price === "number" && (
      <p class="mb-4 font-semibold">
        {new Intl.NumberFormat("id-ID", {
          style: "currency",
          currency: data.currency ?? "IDR",
          maximumFractionDigits: 0,
        }).format(data.price)}
      </p>
    )}

    {data.url && (
      <p class="mb-8">
        <a
          href={data.url}
          class="button-link space-btn-filled"
          target="_blank"
          rel="noopener noreferrer"
        >
          Beli / Hubungi
        </a>
      </p>
    )}

    {imageList.length > 0 && (
      <div class="grid gap-4 md:grid-cols-2 mb-10">
        {imageList.map((img) => (
          <img
            src={img.url}
            alt={img.alt ?? title}
            class="rounded-xl w-full h-auto object-cover"
            loading="lazy"
            decoding="async"
          />
        ))}
      </div>
    )}

    {Astro.content && (
      <article class="prose mx-auto text-left">
        <slot />
      </article>
    )}
  </section>
</MainLayout>
