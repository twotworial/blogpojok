---
import MainLayout from "../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import { withBase } from "../../utils/helpers";
import siteConfig from "../../site.config";

/** Normalisasi path gambar (kompatibel lama/baru) */
function normalizeImg(input?: string | { src: string; alt?: string }) {
  if (!input) return undefined;
  const raw = typeof input === "string" ? input : input.src;
  if (!raw) return undefined;

  if (/^https?:\/\//i.test(raw)) return raw;
  const remapped = raw.replace(/^\/assets\/images\//, "/images/products/");
  const abs = remapped.startsWith("/") ? remapped : `/images/products/${remapped}`;
  return withBase(abs);
}

/** Build-time paths */
export async function getStaticPaths() {
  const entries = await getCollection("products");
  return entries.map((e) => {
    const slug = e.slug ?? e.id.replace(/\.mdx?$/i, "");
    return { params: { slug }, props: { id: e.id } };
  });
}

const { slug } = Astro.params;
const all = await getCollection("products");
const entry = all.find((e) => (e.slug ?? e.id.replace(/\.mdx?$/i, "")) === slug);

if (!entry) {
  throw new Error(`Produk tidak ditemukan: ${slug}`);
}

const data: any = entry.data;
const siteBase = Astro.site ?? siteConfig.website ?? "https://twotworial.com";
const canonicalUrl = new URL(`/produk/${slug}/`, siteBase).href;

const imgs = Array.isArray(data.images) ? data.images : [];
const imageUrls = imgs.map((it: any) => normalizeImg(it)).filter(Boolean);
const firstImg = imageUrls[0];

const pageTitle = data.title;
const pageDesc =
  data.metaDescription ??
  data.excerpt ??
  "Detail produk Twotworial.";

/** Product JSON-LD */
const productJSONLD: any = {
  "@context": "https://schema.org",
  "@type": "Product",
  "@id": `${canonicalUrl}#product`,
  url: canonicalUrl,
  name: data.title,
  description: data.excerpt ?? data.metaDescription ?? "",
  image: imageUrls,
  brand: data.brand ? { "@type": "Brand", name: data.brand } : undefined,
  offers:
    typeof data.price === "number"
      ? {
          "@type": "Offer",
          priceCurrency: data.currency ?? "IDR",
          price: String(data.price),
          availability: `https://schema.org/${data.availability ?? "InStock"}`,
          url: canonicalUrl,
        }
      : undefined,
};
const productJSONLDStr = JSON.stringify(productJSONLD).replace(/</g, "\\u003c");
---

<MainLayout
  activePage="produk"
  pageTitle={`${pageTitle} | ${siteConfig.title}`}
  description={pageDesc}
  breadcrumbTitle={pageTitle}
>
  <script type="application/ld+json" is:inline set:html={productJSONLDStr}></script>

  <section class="page-content">
    <h1 class="text-balance">{data.title}</h1>

    {firstImg && (
      <img
        src={firstImg}
        alt={typeof imgs[0] === "string" ? data.title : (imgs[0]?.alt ?? data.title)}
        class="mx-auto my-4 max-w-2xl rounded-xl"
        loading="lazy"
        decoding="async"
      />
    )}

    {typeof data.price === "number" && (
      <p class="mb-4 text-center font-semibold">
        {new Intl.NumberFormat("id-ID", {
          style: "currency",
          currency: data.currency ?? "IDR",
          maximumFractionDigits: 0,
        }).format(data.price)}
      </p>
    )}

    {data.url && (
      <p class="mb-8 flex justify-center">
        <a
          href={data.url}
          target="_blank"
          rel="noopener noreferrer"
          class="button-link space-btn-filled px-6 py-2"
        >
          Beli / Hubungi
        </a>
      </p>
    )}

    {data.excerpt && <p class="mx-auto max-w-2xl mb-6">{data.excerpt}</p>}

    <article class="prose mx-auto max-w-2xl">
      <slot /> {/* konten markdown produk */}
    </article>
  </section>
</MainLayout>
