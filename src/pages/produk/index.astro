---
import MainLayout from "../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import { withBase } from "../../utils/helpers";
import siteConfig from "../../site.config";

/** Ambil semua produk dan urutkan (punya field `date` akan diutamakan terbaru) */
const products = (await getCollection("products")).sort((a, b) => {
  const da = a.data.date ? new Date(a.data.date).getTime() : 0;
  const db = b.data.date ? new Date(b.data.date).getTime() : 0;
  return db - da;
});

const pageTitle = "Produk";
const pageDescription = "Katalog produk & jasa Twotworial.";
const siteBase = Astro.site ?? siteConfig.website ?? "https://twotworial.com";

/** Canonical absolut */
const canonicalUrl = new URL("/produk/", siteBase).href;

/** Normalisasi sumber gambar */
function normalizeImg(input?: string | { src: string; alt?: string }) {
  if (!input) return undefined;
  const raw = typeof input === "string" ? input : input.src;
  if (!raw) return undefined;

  // URL absolut (http/https)
  if (/^https?:\/\//i.test(raw)) return raw;

  // Path absolut dari public → biarkan apa adanya
  if (raw.startsWith("/assets/images/") || raw.startsWith("/images/products/")) {
    return withBase(raw);
  }

  // Nama file saja → arahkan ke /images/products/
  return withBase(`/images/products/${raw}`);
}

/** JSON-LD ItemList untuk list produk */
const itemListJSONLD = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  itemListElement: products.map((p, i) => {
    const slug = p.slug ?? p.id.replace(/\.mdx?$/i, "");
    const url = new URL(`/produk/${slug}/`, siteBase).href;
    const firstImg =
      Array.isArray(p.data.images) && p.data.images.length > 0
        ? normalizeImg(p.data.images[0] as any)
        : undefined;
    return {
      "@type": "ListItem",
      position: i + 1,
      url,
      name: p.data.title,
      ...(firstImg ? { image: firstImg } : {}),
    };
  }),
};
---

<MainLayout
  activePage="produk"
  pageTitle={`${pageTitle} | ${siteConfig.title}`}
  description={pageDescription}
  breadcrumbTitle="Produk"
>
  <!-- Canonical -->
  <link rel="canonical" href={canonicalUrl} />

  <!-- JSON-LD ItemList -->
  <script type="application/ld+json" is:inline>
    {JSON.stringify(itemListJSONLD).replace(/</g, "\\u003c")}
  </script>

  <section class="page-content">
    <h1 class="text-balance">{pageTitle}</h1>

    <!-- Input cari (non-interaktif, styling saja) -->
    <input
      type="search"
      name="q"
      placeholder="Cari produk..."
      class="w-full rounded-3xl px-5 py-3 my-4"
      aria-label="Cari produk"
    />

    {products.length === 0 ? (
      <div class="rounded-3xl border px-5 py-8 text-center">
        <p class="mb-2">Belum ada produk.</p>
        <p class="text-sm opacity-70">
          Tambahkan file di <code>src/content/products/*.md</code> untuk mulai menampilkan produk.
        </p>
      </div>
    ) : (
      <div class="grid gap-6 md:grid-cols-2">
        {products.map((p) => {
          const slug = p.slug ?? p.id.replace(/\.mdx?$/i, "");
          const url = withBase(`/produk/${slug}/`);
          const data = p.data as any;
          const firstImg =
            Array.isArray(data.images) && data.images.length > 0
              ? normalizeImg(data.images[0])
              : undefined;

            return (
              <article class="rounded-2xl border p-4">
                {firstImg && (
                  <img
                    src={firstImg}
                    alt={typeof data.images?.[0] === "string" ? data.title : (data.images?.[0]?.alt || data.title)}
                    class="mb-3 rounded-xl w-full h-auto object-cover"
                    loading="lazy"
                    decoding="async"
                  />
                )}

                <h2 class="text-lg font-semibold mb-1">
                  <a href={url} class="hover:underline">{data.title}</a>
                </h2>

                {data.excerpt && <p class="text-sm mb-3">{data.excerpt}</p>}

                <div class="flex items-center justify-between">
                  {typeof data.price === "number" && (
                    <span class="font-medium">
                      {new Intl.NumberFormat("id-ID", {
                        style: "currency",
                        currency: data.currency ?? "IDR",
                        maximumFractionDigits: 0,
                      }).format(data.price)}
                    </span>
                  )}
                  <a href={url} class="button-link space-btn-outlined text-sm">Lihat Detail</a>
                </div>
              </article>
            );
        })}
      </div>
    )}
  </section>
</MainLayout>
